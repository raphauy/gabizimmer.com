// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        Role?    // superadmin o colaborador
  image       String?  // URL de imagen de perfil
  isOnboarded Boolean  @default(false) // Si completó onboarding
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relación con tokens OTP
  otpTokens OtpToken[]
  
  // Relación con posts del blog
  posts Post[]
  
  @@map("users")
}

model OtpToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relación con usuario
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_tokens")
}


enum Role {
  superadmin
  colaborador
}

// Modelos del sistema de blog

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  posts     PostTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("tags")
}

model Post {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  content       Json        // Json from novel editor
  excerpt       String?
  status        PostStatus  @default(DRAFT)
  language      Language
  featuredImageUrl String?

  seoTitle        String?
  seoDescription  String?
  
  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  
  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id])
  
  tags          PostTag[]
  comments      Comment[]
  
  readingTime   Int?        // Minutos estimados de lectura
  
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([slug, language])
  @@index([status, publishedAt])
  @@index([authorId])
  @@index([categoryId])
  @@map("posts")
}

model PostTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id          String        @id @default(cuid())
  content     String        @db.Text
  status      CommentStatus @default(PENDING)
  
  postId      String
  post        Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  authorName  String
  authorEmail String
  
  // Campos para tracking de moderación
  approvedBy      String?       // "Agente IA", email del user, o null
  rejectionReason String?       // Razón del rechazo por IA
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([postId, status])
  @@map("comments")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Language {
  ES
  EN
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}